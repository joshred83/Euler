# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
# The sum of these multiples is 23.

# Find the sum of all the multiples of 3 or 5 below 1000.

def euler1():
    # If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    # The sum of these multiples is 23.

    # Find the sum of all the multiples of 3 or 5 below 1000.

    multiples = 0
    for i in range(1000):
        if i % 3 == 0:
            multiples += i
        elif i % 5 == 0:
            multiples += i
    print(multiples)


def euler2():
    # Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    # By starting with 1 and 2, the first 10 terms will be:
    #
    # 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    #
    # By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    # find the sum of the even-valued terms.

    x, y = 0, 1
    sumEven = 0
    while y < 4000000:
        x, y = y, x + y
        if y % 2 == 0:
            sumEven += y
    print(sumEven)


def euler3():
    # The prime factors of 13195 are 5, 7, 13 and 29.
    #
    # What is the largest prime factor of the number 600851475143
    test_num = 600851475143

    def list_of_factors(target):
        factor_list = []
        low_factor = 2
        high_factor = int(target / 2)
        while low_factor < high_factor:
            if target % low_factor == 0:
                factor_list.append(low_factor)
                high_factor = target / low_factor
            low_factor += 1

        return factor_list

    factors = list_of_factors(test_num)
    primes = []
    print(factors)
    for f in factors:
        print(f)
        if len(list_of_factors(f)) == 1:
            primes.append(f)
    print(max(primes))



# euler1()
# euler2()
euler3()
